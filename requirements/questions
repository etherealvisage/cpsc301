How many memos per day?
  Dealing with 10 users completely different from dealing with 100
    IIRC, we'll have 60-70 docs, 20-30 residents

Who can post memos?
  Probably need all users in system (or at least all docs) to have this ability
    But then this creates enormous number of memos -- everyone will have different criteria as to what's important enough for a memo
  So, then, question becomes, How do we prioritize memos? What signals to use?
    Time
    User importance
      Can be assigned by admin, or can be calculated algorithmically
        Given small scale of system, manual assignment by admin probably better
    Category (importance differs -- "Ecstasy treatment policy change" vs. "Microwave use in lounge")

How many discussion posts per day?
  Discussion posts should be separated from memos in UI, even if handling on backend is unified
  How to rank?
    Use same signals as memos (time, user importance, category)?
      Use same weighting or different?

What projects can we re-use code from? (Bootstrap)
  HTML/CSS framework: Bootstrap (http://twitter.github.com/bootstrap/)
  Web app framework:  Express (http://expressjs.com/)
  Templating engine:  Jade (http://jade-lang.com/)
  Testing framework:  Mocha (http://visionmedia.github.com/mocha/)

Should discussions be threaded or flat?
  Threaded seems more natural -- allows for multiple lines of long-lived discussion to evolve
  We should definitely track which posts are read and which are unread, allowing user to quickly scan new posts
    If threaded, how do we indicate what posts are unread? Much easier if discussions are flat, where we can just take user to start of new post

How to categorize memos & discussions?
  Do we have administrator explicitly create categories?
    Or does user tag posts? Do we aim for hybrid like StackOverflow uses, where admin can merge tags to minimize different tags referring to same thing?

Sources of content:
  Perhaps keep focus on "subscribing" to different sources of content
    This would cut down on amount of information thrown at user, allowing him to focus on only that which interests him
    By default, user is subscribed to all announcements
    User can also subscribe to specific discussion categories/tags of interest
      Upon posting in a thread, user is perhaps automatically subscribed to it -- or can he be subscribed to only the "subthread" headed by his reply, so that he'll be notified of only replies to himself?

Performance testing:
  Shaun and Dr. Sillito seem to want hard performance numbers in our requirements doc
    But this means that we must be able to verify the numbers
  Writing test that uses ab to test performance isn't too hard
    Can be integrated into main test suite or left as separate test to be run periodically
    But this means simulating user logins, etc. -- not just matter of performing simple GET requests
    Settling on "hard" performance numbers is difficult -- performance varies based on speed of machine, other load on system

UI mockups: what accommodations should we make for "extra" functionality beyond first realistic iteration in our UI mockups?
  Do we need to design mockups for, say, journal article sharing interface?

Pages we'll need:
  Landing page
  Discussion landing page
    View thread
      On this page, will need controls to edit/delete posts for both original user & admins
    Create new thread
  Memo landing page (maybe)
  Search results
  User profile page
    Change password, avatar
  Admin landing page
    Add/edit/delete users
  
